// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Competition2019.subsystems;


import org.usfirst.frc3824.Competition2019.Constants;
import org.usfirst.frc3824.Competition2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class HatchPanel extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Solenoid latcher;
    private Solenoid deployer;
    private WPI_TalonSRX pickupAngle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double hatchPickupAnglePIDParamF = Constants.HATCH_PICKUP_ANGLE_F;
    private double hatchPickupAnglePIDParamP = Constants.HATCH_PICKUP_ANGLE_P;
    private double hatchPickupAnglePIDParamI = Constants.HATCH_PICKUP_ANGLE_I;
    private double hatchPickupAnglePIDParamD = Constants.HATCH_PICKUP_ANGLE_D;
    private int    hatchPickupAngleCruiseVelocity = Constants.HATCH_PICKUP_ANGLE_CRUISE_VELOCITY;
    private int    hatchPickupAngleAcceleration   = Constants.HATCH_PICKUP_ANGLE_ACCELERATION;

    private int hatchPickupAngleSetpoint       = 0;

    private boolean latchStatus = false;
    private boolean deployStatus = false;

    public HatchPanel() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        latcher = new Solenoid(0, 3);
        addChild("Latcher",latcher);
        
        
        deployer = new Solenoid(0, 2);
        addChild("Deployer",deployer);
        
        
        pickupAngle = new WPI_TalonSRX(9);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        /**************************
         * Hatch Pickup Angle PID *
         **************************/
        pickupAngle.configFactoryDefault();
        pickupAngle.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
                                                  Constants.K_PID_LOOP_IDX,
                                                  Constants.K_TIMEOUT_MS);

        pickupAngle.setSensorPhase(false);
        pickupAngle.setInverted(false);
        
        pickupAngle.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.K_TIMEOUT_MS);
        pickupAngle.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.K_TIMEOUT_MS);
    
        pickupAngle.configNominalOutputForward(0, Constants.K_TIMEOUT_MS);
        pickupAngle.configNominalOutputReverse(0, Constants.K_TIMEOUT_MS);
        pickupAngle.configPeakOutputForward(1, Constants.K_TIMEOUT_MS);
        pickupAngle.configPeakOutputReverse(-1, Constants.K_TIMEOUT_MS);

        pickupAngle.selectProfileSlot(Constants.K_SLOT_IDX, Constants.K_PID_LOOP_IDX);
        pickupAngle.config_kF(Constants.K_SLOT_IDX, hatchPickupAnglePIDParamF, Constants.K_TIMEOUT_MS);
        pickupAngle.config_kP(Constants.K_SLOT_IDX, hatchPickupAnglePIDParamP, Constants.K_TIMEOUT_MS);
        pickupAngle.config_kI(Constants.K_SLOT_IDX, hatchPickupAnglePIDParamI, Constants.K_TIMEOUT_MS);
        pickupAngle.config_kD(Constants.K_SLOT_IDX, hatchPickupAnglePIDParamD, Constants.K_TIMEOUT_MS);

        pickupAngle.configMotionCruiseVelocity(hatchPickupAngleCruiseVelocity, Constants.K_TIMEOUT_MS);
        pickupAngle.configMotionAcceleration(hatchPickupAngleAcceleration, Constants.K_TIMEOUT_MS);
    
        pickupAngle.setSelectedSensorPosition(0, Constants.K_PID_LOOP_IDX, Constants.K_TIMEOUT_MS);

        toggleLatch();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void toggleLatch()
    {
        latchStatus = !latchStatus;
        latcher.set(latchStatus);
    }
    public boolean getLatchStatus()
    {
        return latchStatus;
    }
    public void setDeployed()
    {
        deployStatus = !deployStatus;
        deployer.set(deployStatus);
    }
    public boolean getDeployStatus()
    {
        return deployStatus;
    }
    public void setAngleEncoder(int ticks)
    {
        pickupAngle.set(ControlMode.MotionMagic, ticks);

        hatchPickupAngleSetpoint = ticks;
    }
    public double getAngleSetpoint()
    {
        return hatchPickupAngleSetpoint;
    }
    public double getAngleVelocity()
    {
        return pickupAngle.getSelectedSensorVelocity();
    }
    public int getAngleEncoderPosition()
    {
        return pickupAngle.getSelectedSensorPosition(0);
    }
    public double getAngleError()
    {
        return pickupAngle.getClosedLoopError();
    }
    public double getAngleMotorOutput()
    {
        return pickupAngle.getMotorOutputPercent();
    }
    public void setAnglePID()
    {
        hatchPickupAnglePIDParamF = SmartDashboard.getNumber("HATCH PICKUP ANGLE F", Constants.HATCH_PICKUP_ANGLE_F);
        hatchPickupAnglePIDParamP = SmartDashboard.getNumber("HATCH PICKUP ANGLE P", Constants.HATCH_PICKUP_ANGLE_P);
        hatchPickupAnglePIDParamI = SmartDashboard.getNumber("HATCH PICKUP ANGLE I", Constants.HATCH_PICKUP_ANGLE_I);
        hatchPickupAnglePIDParamD = SmartDashboard.getNumber("HATCH PICKUP ANGLE D", Constants.HATCH_PICKUP_ANGLE_D);
        hatchPickupAngleCruiseVelocity = (int)SmartDashboard.getNumber("HATCH PICKUP ANGLE CRUISE VELOCITY", Constants.HATCH_PICKUP_ANGLE_CRUISE_VELOCITY);
        hatchPickupAngleAcceleration = (int)SmartDashboard.getNumber("HATCH PICKUP ANGLE ACCELERATION", Constants.HATCH_PICKUP_ANGLE_ACCELERATION);

        pickupAngle.config_kF(0, hatchPickupAnglePIDParamF, Constants.K_TIMEOUT_MS);
        pickupAngle.config_kP(0, hatchPickupAnglePIDParamP, Constants.K_TIMEOUT_MS);
        pickupAngle.config_kI(0, hatchPickupAnglePIDParamI, Constants.K_TIMEOUT_MS);
        pickupAngle.config_kD(0, hatchPickupAnglePIDParamD, Constants.K_TIMEOUT_MS);

        pickupAngle.configMotionCruiseVelocity(hatchPickupAngleCruiseVelocity, Constants.K_TIMEOUT_MS);
        pickupAngle.configMotionAcceleration(hatchPickupAngleAcceleration, Constants.K_TIMEOUT_MS);
    }
}

