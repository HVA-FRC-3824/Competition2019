// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Competition2019.subsystems;


import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

import org.usfirst.frc3824.Competition2019.Constants;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Climber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX climberFrontLeft;
    private WPI_TalonSRX climberFrontRight;
    private WPI_TalonSRX climberBackLeft;
    private WPI_TalonSRX climberBackRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double climberFrontPIDParamF = Constants.CLIMBER_FRONT_F;
    private double climberFrontPIDParamP = Constants.CLIMBER_FRONT_P;
    private double climberFrontPIDParamI = Constants.CLIMBER_FRONT_I;
    private double climberFrontPIDParamD = Constants.CLIMBER_FRONT_D;
    private int    climberFrontCruisevelocity = Constants.CLIMBER_FRONT_CRUISE_VELOCITY;
    private int    climberFrontAcceleration   = Constants.CLIMBER_FRONT_ACCELERATION;

    private double climberFrontSetpoint = 0;

    private double climberBackPIDParamF = Constants.CLIMBER_BACK_F;
    private double climberBackPIDParamP = Constants.CLIMBER_BACK_P;
    private double climberBackPIDParamI = Constants.CLIMBER_BACK_I;
    private double climberBackPIDParamD = Constants.CLIMBER_BACK_D;
    private int    climberBackCruisevelocity = Constants.CLIMBER_BACK_CRUISE_VELOCITY;
    private int    climberBackAcceleration   = Constants.CLIMBER_BACK_ACCELERATION;

    private double climberBackSetpoint = 0;

    public Climber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        climberFrontLeft = new WPI_TalonSRX(5);
        
        
        
        climberFrontRight = new WPI_TalonSRX(6);
        
        
        
        climberBackLeft = new WPI_TalonSRX(7);
        
        
        
        climberBackRight = new WPI_TalonSRX(8);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        initializeClimberTalons(climberFrontLeft, false, true); // setInvert, setSensorPhase
        initializeClimberTalons(climberFrontRight, false, false);
        initializeClimberTalons(climberBackLeft, true, true);
        initializeClimberTalons(climberBackRight, true, true);
    }

    public void initializeClimberTalons(WPI_TalonSRX talonSRX, boolean setInvert, boolean setSensorPhase)
    {
        talonSRX.configFactoryDefault();
        talonSRX.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
                                                Constants.K_PID_LOOP_IDX,
                                                Constants.K_TIMEOUT_MS);

        talonSRX.setSensorPhase(setSensorPhase);
        talonSRX.setInverted(setInvert);
        
        talonSRX.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.K_TIMEOUT_MS);
        talonSRX.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.K_TIMEOUT_MS);

        talonSRX.configNominalOutputForward(0, Constants.K_TIMEOUT_MS);
        talonSRX.configNominalOutputReverse(0, Constants.K_TIMEOUT_MS);
        talonSRX.configPeakOutputForward(1, Constants.K_TIMEOUT_MS);
        talonSRX.configPeakOutputReverse(-1, Constants.K_TIMEOUT_MS);

        talonSRX.selectProfileSlot(Constants.K_SLOT_IDX, Constants.K_PID_LOOP_IDX);
        talonSRX.config_kF(Constants.K_SLOT_IDX, climberFrontPIDParamF, Constants.K_TIMEOUT_MS);
        talonSRX.config_kP(Constants.K_SLOT_IDX, climberFrontPIDParamP, Constants.K_TIMEOUT_MS);
        talonSRX.config_kI(Constants.K_SLOT_IDX, climberFrontPIDParamI, Constants.K_TIMEOUT_MS);
        talonSRX.config_kD(Constants.K_SLOT_IDX, climberFrontPIDParamD, Constants.K_TIMEOUT_MS);

        talonSRX.configMotionCruiseVelocity(climberFrontCruisevelocity, Constants.K_TIMEOUT_MS);
        talonSRX.configMotionAcceleration(climberFrontAcceleration, Constants.K_TIMEOUT_MS);

        talonSRX.setSelectedSensorPosition(0, Constants.K_PID_LOOP_IDX, Constants.K_TIMEOUT_MS);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setPositionFront(int position)
    {
        climberFrontLeft.set(ControlMode.MotionMagic, position);
        climberFrontRight.set(ControlMode.MotionMagic, position);
        // climberFrontLeft.set(ControlMode.Current, position);

        climberFrontSetpoint = position;
    }
    public void setPositionBack(int position)
    {
        climberBackLeft.set(ControlMode.MotionMagic, position);
        climberBackRight.set(ControlMode.MotionMagic, position);
        // climberBackLeft.set(ControlMode.Current, position);

        climberBackSetpoint = position;
    }
    public double getFrontSetpoint()
    {
        return climberFrontSetpoint;
    }
    public double getBackSetpoint()
    {
        return climberBackSetpoint;
    }
    public double getFrontPosition()
    {
        return climberFrontLeft.getSelectedSensorPosition();
    }
    public double getBackPosition()
    {
        return climberBackLeft.getSelectedSensorPosition();
    }
    public double getFrontVelocity()
    {
        return climberFrontLeft.getSelectedSensorVelocity();
    }
    public double getBackVelocity()
    {
        return climberFrontLeft.getSelectedSensorVelocity();
    }
    public double getFrontError()
    {
        return climberFrontLeft.getClosedLoopError();
    }
    public double getBackError()
    {
        return climberFrontRight.getClosedLoopError();
    }
    public double getFrontVoltage()
    {
        return climberFrontLeft.getMotorOutputPercent();
    }
    public double getBackVoltage()
    {
        return climberBackLeft.getMotorOutputPercent();
    }
    public void stop()
    {
        climberFrontLeft.set(0.0);
        climberBackLeft.set(0.0);
    }
    public void setFrontPID()
    {
        climberFrontPIDParamF = SmartDashboard.getNumber("CLIMBER FRONT F", Constants.CLIMBER_FRONT_F);
        climberFrontPIDParamP = SmartDashboard.getNumber("CLIMBER FRONT P", Constants.CLIMBER_FRONT_P);
        climberFrontPIDParamI = SmartDashboard.getNumber("CLIMBER FRONT I", Constants.CLIMBER_FRONT_I);
        climberFrontPIDParamD = SmartDashboard.getNumber("CLIMBER FRONT D", Constants.CLIMBER_FRONT_D);
        climberFrontCruisevelocity = (int)SmartDashboard.getNumber("CLIMBER FRONT CRUISE VELOCITY", Constants.CLIMBER_FRONT_CRUISE_VELOCITY);
        climberFrontAcceleration = (int)SmartDashboard.getNumber("CLIMBER FRONT ACCELERATION", Constants.CLIMBER_FRONT_ACCELERATION);

        climberFrontLeft.config_kF(0, climberFrontPIDParamF, Constants.K_TIMEOUT_MS);
        climberFrontLeft.config_kP(0, climberFrontPIDParamP, Constants.K_TIMEOUT_MS);
        climberFrontLeft.config_kI(0, climberFrontPIDParamI, Constants.K_TIMEOUT_MS);
        climberFrontLeft.config_kD(0, climberFrontPIDParamD, Constants.K_TIMEOUT_MS);

        climberFrontLeft.configMotionCruiseVelocity(climberFrontCruisevelocity, Constants.K_TIMEOUT_MS);
        climberFrontLeft.configMotionAcceleration(climberFrontAcceleration, Constants.K_TIMEOUT_MS);
    }
    public void setBackPID()
    {
        climberBackPIDParamF = SmartDashboard.getNumber("CLIMBER BACK F", Constants.CLIMBER_BACK_F);
        climberBackPIDParamP = SmartDashboard.getNumber("CLIMBER BACK P", Constants.CLIMBER_BACK_P);
        climberBackPIDParamI = SmartDashboard.getNumber("CLIMBER BACK I", Constants.CLIMBER_BACK_I);
        climberBackPIDParamD = SmartDashboard.getNumber("CLIMBER BACK D", Constants.CLIMBER_BACK_D);
        climberBackCruisevelocity = (int)SmartDashboard.getNumber("CLIMBER BACK CRUISE VELOCITY", Constants.CLIMBER_BACK_CRUISE_VELOCITY);
        climberBackAcceleration = (int)SmartDashboard.getNumber("CLIMBER BACK ACCELERATION", Constants.CLIMBER_BACK_ACCELERATION);

        climberBackLeft.config_kF(0, climberBackPIDParamF, Constants.K_TIMEOUT_MS);
        climberBackLeft.config_kP(0, climberBackPIDParamP, Constants.K_TIMEOUT_MS);
        climberBackLeft.config_kI(0, climberBackPIDParamI, Constants.K_TIMEOUT_MS);
        climberBackLeft.config_kD(0, climberBackPIDParamD, Constants.K_TIMEOUT_MS);

        climberBackLeft.configMotionCruiseVelocity(climberBackCruisevelocity, Constants.K_TIMEOUT_MS);
        climberBackLeft.configMotionAcceleration(climberBackAcceleration, Constants.K_TIMEOUT_MS);
    }
}
