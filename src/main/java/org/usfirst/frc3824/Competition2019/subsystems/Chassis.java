// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Competition2019.subsystems;


import com.kauailabs.navx.frc.AHRS;

import org.usfirst.frc3824.Competition2019.Constants;
import org.usfirst.frc3824.Competition2019.Robot;
import org.usfirst.frc3824.Competition2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.SPI;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private VictorSP right;
    private VictorSP left;
    private DifferentialDrive differentialDrive;
    private Solenoid gearShift;
    private Compressor compressor;
    private AnalogInput ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private double turnAngle_F = Constants.TURNANGLE_F;
    private double turnAngle_P = Constants.TURNANGLE_P;
    private double turnAngle_I = Constants.TURNANGLE_I;
    private double turnangle_D = Constants.TURNANGLE_D;

    private double drivetrainDriveStraight_P = Constants.DRIVETRAIN_DRIVE_STRAIGHT_P;
    private double drivetrainDriveStraight_I = Constants.DRIVETRAIN_DRIVE_STRAIGHT_I;
    private double drivetrainDriveStraight_D = Constants.DRIVETRAIN_DRIVE_STRAIGHT_D;

    private AHRS ahrs = new AHRS(SPI.Port.kMXP);

    private double m_magnitude;
    
    public PIDController angleGyroPID = new PIDController(drivetrainDriveStraight_P,
                                                          drivetrainDriveStraight_I,
                                                          drivetrainDriveStraight_D,
                                                          ahrs, new AnglePIDOutput());

    // integer controls which direction driving
    public int m_driveDirection = 1;

    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        right = new VictorSP(1);
        addChild("Right",right);
        right.setInverted(false);
        
        left = new VictorSP(0);
        addChild("Left",left);
        left.setInverted(false);
        
        differentialDrive = new DifferentialDrive(left, right);
        addChild("Differential Drive",differentialDrive);
        differentialDrive.setSafetyEnabled(false);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        
        gearShift = new Solenoid(0, 0);
        addChild("GearShift",gearShift);
        
        
        
        compressor = new Compressor(0);
        addChild("Compressor ",compressor);
        
        
        ultrasonic = new AnalogInput(0);
        addChild("Ultrasonic",ultrasonic);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // initialize gear shift in low gear
        gearShift.set(true);

        resetNavXGyro();

        angleGyroPID.setInputRange(-360, 360);

        // compressor.start(); // starts compressor
        // compressor.stop();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    /*********************************************************************
     * Method to control the drive through the specified joystick
     *********************************************************************/
    private class AnglePIDOutput implements PIDOutput
    {
        public void pidWrite(double PIDOutput)
        {
            differentialDrive.arcadeDrive(-m_magnitude, -PIDOutput, false);
        }
    }
    public void driveWithPower(double power)
    {
        differentialDrive.arcadeDrive(power, 0.0);
    }
    public void driveWithJoystick(Joystick stick)
    {
        double twist     =  stick.getTwist();
        double moveValue =  stick.getY();

        // Reduce the sensitivity of the joystick
        if (Math.abs(twist) > 0.2)
            // By default, positive
            twist *= (-m_driveDirection * 0.8);
  
        // Drive with arcade control
        // By default, negative
        differentialDrive.arcadeDrive((m_driveDirection * moveValue), twist);
    }
    public void flipDriveDirection()
    {
        m_driveDirection = -m_driveDirection;
    }
    public void resetNavXGyro()
    {
        ahrs.reset();
    }
    /*********************************************************************
     * Gets angle of navx gyro
     *********************************************************************/
    public double getGyroAngle()
    {
        return (ahrs.getAngle());
    }
    /*********************************************************************
     * Gets ultrasonic distance in inches
     *********************************************************************/
    public double getUltrasonicDistance()
    {
        //get ultrasonic distance
        return ((Robot.constants.ULTRASONIC_SLOPE * ultrasonic.getVoltage()) + Robot.constants.ULTRASONIC_OFFSET);
    }
    /*********************************************************************
     * Shift to high gear
     *********************************************************************/
    public void shiftHighGear()
    {
        gearShift.set(false);
    }
    /*********************************************************************
     * Shift to low gear
     *********************************************************************/
    public void shiftLowGear()
    {
        gearShift.set(true);
    }
}
