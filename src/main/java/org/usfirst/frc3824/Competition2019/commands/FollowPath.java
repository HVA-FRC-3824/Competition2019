// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Competition2019.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import jaci.pathfinder.Pathfinder;
import jaci.pathfinder.Trajectory;

import java.io.File;
import java.io.IOException;

import org.usfirst.frc3824.Competition2019.Robot;

/**
 *
 */
public class FollowPath extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private Timer m_timer = new Timer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FollowPath() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        if(!Robot.chassis.getIsFollowingPath())
        {
            m_timer.start();
            setupPath();
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (m_timer.get() > 0.5)
            return !Robot.chassis.getIsFollowingPath();
        else
            return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.chassis.setIsFollowingPath(false);

        m_timer.stop();
        m_timer.reset();

        Robot.stopPathNotifier();

        Robot.chassis.incrementCurrentPath();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    private void setupPath()
    {
        System.out.println("\n\n\n\n\nIN SETUP PATH\n\n\n\n\n");

        int pathNumber = Robot.chassis.getCurrentPathNumber();
        String pathName = Robot.chassis.getCurrentPath();

        Trajectory leftTraj = null;
        Trajectory rightTraj = null;

        try 
        {
            leftTraj = Pathfinder.readFromCSV(new File("/home/lvuser/deploy/paths/" + pathName + ".right.pf1.csv"));
            rightTraj = Pathfinder.readFromCSV(new File("/home/lvuser/deploy/paths/" + pathName + ".left.pf1.csv"));

            Robot.setTrajectories(leftTraj, rightTraj);
        } catch(IOException e)
        {
            System.out.println("COULD NOT FIND PATH");
            System.out.println(e.getMessage());
        }

        if(pathNumber == 0 || pathNumber == 2)
        {
            Robot.setPathIsInReverse(true);
        } else
        {
            Robot.setPathIsInReverse(false);
        }
        System.out.println("\n\n\n\n\n PATH NAME: " + pathName);
        if(leftTraj != null && rightTraj != null)
        {
            Robot.startPathNotifier(leftTraj.get(0).dt);
        }
    }
}
